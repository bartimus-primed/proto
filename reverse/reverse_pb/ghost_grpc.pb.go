// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package reverse_pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ReverseInteractClient is the client API for ReverseInteract service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReverseInteractClient interface {
	SendCommandGetResponse(ctx context.Context, in *Command, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SendCommand(ctx context.Context, in *Command, opts ...grpc.CallOption) (*Response, error)
	HandsOn(ctx context.Context, opts ...grpc.CallOption) (ReverseInteract_HandsOnClient, error)
}

type reverseInteractClient struct {
	cc grpc.ClientConnInterface
}

func NewReverseInteractClient(cc grpc.ClientConnInterface) ReverseInteractClient {
	return &reverseInteractClient{cc}
}

func (c *reverseInteractClient) SendCommandGetResponse(ctx context.Context, in *Command, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/pb.ReverseInteract/SendCommandGetResponse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reverseInteractClient) SendCommand(ctx context.Context, in *Command, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.ReverseInteract/SendCommand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reverseInteractClient) HandsOn(ctx context.Context, opts ...grpc.CallOption) (ReverseInteract_HandsOnClient, error) {
	stream, err := c.cc.NewStream(ctx, &ReverseInteract_ServiceDesc.Streams[0], "/pb.ReverseInteract/HandsOn", opts...)
	if err != nil {
		return nil, err
	}
	x := &reverseInteractHandsOnClient{stream}
	return x, nil
}

type ReverseInteract_HandsOnClient interface {
	Send(*Command) error
	Recv() (*Response, error)
	grpc.ClientStream
}

type reverseInteractHandsOnClient struct {
	grpc.ClientStream
}

func (x *reverseInteractHandsOnClient) Send(m *Command) error {
	return x.ClientStream.SendMsg(m)
}

func (x *reverseInteractHandsOnClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ReverseInteractServer is the server API for ReverseInteract service.
// All implementations must embed UnimplementedReverseInteractServer
// for forward compatibility
type ReverseInteractServer interface {
	SendCommandGetResponse(context.Context, *Command) (*emptypb.Empty, error)
	SendCommand(context.Context, *Command) (*Response, error)
	HandsOn(ReverseInteract_HandsOnServer) error
	mustEmbedUnimplementedReverseInteractServer()
}

// UnimplementedReverseInteractServer must be embedded to have forward compatible implementations.
type UnimplementedReverseInteractServer struct {
}

func (UnimplementedReverseInteractServer) SendCommandGetResponse(context.Context, *Command) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendCommandGetResponse not implemented")
}
func (UnimplementedReverseInteractServer) SendCommand(context.Context, *Command) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendCommand not implemented")
}
func (UnimplementedReverseInteractServer) HandsOn(ReverseInteract_HandsOnServer) error {
	return status.Errorf(codes.Unimplemented, "method HandsOn not implemented")
}
func (UnimplementedReverseInteractServer) mustEmbedUnimplementedReverseInteractServer() {}

// UnsafeReverseInteractServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReverseInteractServer will
// result in compilation errors.
type UnsafeReverseInteractServer interface {
	mustEmbedUnimplementedReverseInteractServer()
}

func RegisterReverseInteractServer(s grpc.ServiceRegistrar, srv ReverseInteractServer) {
	s.RegisterService(&ReverseInteract_ServiceDesc, srv)
}

func _ReverseInteract_SendCommandGetResponse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Command)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReverseInteractServer).SendCommandGetResponse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ReverseInteract/SendCommandGetResponse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReverseInteractServer).SendCommandGetResponse(ctx, req.(*Command))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReverseInteract_SendCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Command)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReverseInteractServer).SendCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ReverseInteract/SendCommand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReverseInteractServer).SendCommand(ctx, req.(*Command))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReverseInteract_HandsOn_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ReverseInteractServer).HandsOn(&reverseInteractHandsOnServer{stream})
}

type ReverseInteract_HandsOnServer interface {
	Send(*Response) error
	Recv() (*Command, error)
	grpc.ServerStream
}

type reverseInteractHandsOnServer struct {
	grpc.ServerStream
}

func (x *reverseInteractHandsOnServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *reverseInteractHandsOnServer) Recv() (*Command, error) {
	m := new(Command)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ReverseInteract_ServiceDesc is the grpc.ServiceDesc for ReverseInteract service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ReverseInteract_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.ReverseInteract",
	HandlerType: (*ReverseInteractServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendCommandGetResponse",
			Handler:    _ReverseInteract_SendCommandGetResponse_Handler,
		},
		{
			MethodName: "SendCommand",
			Handler:    _ReverseInteract_SendCommand_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "HandsOn",
			Handler:       _ReverseInteract_HandsOn_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "ghost.proto",
}
